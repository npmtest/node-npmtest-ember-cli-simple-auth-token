{"/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/test.js":"/* istanbul instrument in package npmtest_ember_cli_simple_auth_token */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/lib.npmtest_ember_cli_simple_auth_token.js":"/* istanbul instrument in package npmtest_ember_cli_simple_auth_token */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_ember_cli_simple_auth_token = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_ember_cli_simple_auth_token = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-ember-cli-simple-auth-token && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_ember_cli_simple_auth_token */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_ember_cli_simple_auth_token\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_ember_cli_simple_auth_token.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_ember_cli_simple_auth_token.rollup.js'] =\n            local.assetsDict['/assets.npmtest_ember_cli_simple_auth_token.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_ember_cli_simple_auth_token.__dirname + '/lib.npmtest_ember_cli_simple_auth_token.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'simple-auth-token'\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/addon/configuration.js":"import loadConfig from './utils/load-config';\n\nvar defaults = {\n  serverTokenEndpoint: '/api-token-auth/',\n  serverTokenRefreshEndpoint: '/api-token-refresh/',\n  identificationField: 'username',\n  passwordField: 'password',\n  tokenPropertyName: 'token',\n  refreshAccessTokens: true,\n  refreshLeeway: 0,\n  tokenExpireName: 'exp',\n  authorizationPrefix: 'Bearer ',\n  authorizationHeaderName: 'Authorization',\n  timeFactor: 1,\n  headers: {}\n};\n\n/**\n  Ember Simple Auth Token's configuration object.\n\n  To change any of these values, set them on the application's\n  environment object:\n\n  ```js\n  ENV['simple-auth-token'] = {\n    serverTokenEndpoint: '/some/other/endpoint'\n  }\n  ```\n\n  @class Token\n  @namespace SimpleAuth.Configuration\n  @module simple-auth/configuration\n*/\nexport default {\n  /**\n    The endpoint on the server the authenticator acquires the auth token\n    and email from.\n\n    @property serverTokenEndpoint\n    @readOnly\n    @static\n    @type String\n    @default '/users/sign_in'\n  */\n  serverTokenEndpoint: defaults.serverTokenEndpoint,\n\n\n  /**\n    The endpoint on the server where the authenticator refreshes a token.\n    @property serverTokenRefreshEndpoint\n    @type String\n    @default '/api-token-refresh/'\n  */\n  serverTokenRefreshEndpoint: defaults.serverTokenRefreshEndpoint,\n\n\n  /**\n    The attribute-name that is used for the identification field when sending\n    the authentication data to the server.\n\n    @property identificationField\n    @readOnly\n    @static\n    @type String\n    @default 'username'\n  */\n  identificationField: defaults.identificationField,\n\n  /**\n    The attribute-name that is used for the password field when sending\n    the authentication data to the server.\n\n    @property passwordField\n    @readOnly\n    @static\n    @type String\n    @default 'password'\n  */\n  passwordField: defaults.passwordField,\n\n  /**\n    The name of the property in session that contains token\n    used for authorization.\n\n    @property tokenPropertyName\n    @readOnly\n    @static\n    @type String\n    @default 'token'\n  */\n  tokenPropertyName: defaults.tokenPropertyName,\n\n  /**\n    Sets whether the authenticator automatically refreshes access tokens.\n    @property refreshAccessTokens\n    @type Boolean\n    @default true\n  */\n  refreshAccessTokens: defaults.refreshAccessTokens,\n\n  /**\n    The number of seconds to subtract from the token's time of expiration when\n    scheduling the automatic token refresh call.\n    @property refreshLeeway\n    @type Integer\n    @default 0 (seconds)\n  */\n  refreshLeeway: defaults.refreshLeeway,\n\n  /**\n    The name for which decoded token field represents the token expire time.\n    @property tokenExpireName\n    @type String\n    @default 'exp'\n  */\n  tokenExpireName: defaults.tokenExpireName,\n\n  /**\n    Default time unit.\n    @property timeFactor\n    @type Integer\n    @default 1 (seconds)\n  */\n  timeFactor: 1,\n\n  /**\n    The prefix used in the value of the Authorization header.\n\n    @property authorizationPrefix\n    @readOnly\n    @static\n    @type String\n    @default 'Bearer '\n  */\n  authorizationPrefix: defaults.authorizationPrefix,\n\n  /**\n    The name of the HTTP Header used to send token.\n\n    @property authorizationHeaderName\n    @readOnly\n    @static\n    @type String\n    @default 'Authorization'\n  */\n  authorizationHeaderName: defaults.authorizationHeaderName,\n\n  /**\n    Custom headers to be added on request.\n\n    @property headers\n    @readonly\n    @static\n    @type Object\n    @default {}\n  */\n  headers: defaults.headers,\n\n  /**\n    @method load\n    @private\n  */\n  load: loadConfig(defaults)\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/config/ember-try.js":"module.exports = {\n  scenarios: [\n    {\n      name: 'default',\n      dependencies: { }\n    },\n    {\n      name: 'ember-release',\n      dependencies: {\n        'ember': 'components/ember#release'\n      },\n      resolutions: {\n        'ember': 'release'\n      }\n    },\n    {\n      name: 'ember-beta',\n      dependencies: {\n        'ember': 'components/ember#beta'\n      },\n      resolutions: {\n        'ember': 'beta'\n      }\n    },\n    {\n      name: 'ember-canary',\n      dependencies: {\n        'ember': 'components/ember#canary'\n      },\n      resolutions: {\n        'ember': 'canary'\n      }\n    }\n  ]\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/config/environment.js":"'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/addon/authenticators/jwt.js":"import Ember from 'ember';\nimport Configuration from '../configuration';\nimport TokenAuthenticator from './token';\n\n/**\n  JWT (JSON Web Token) Authenticator that supports automatic token refresh.\n\n  Inspired by [ember-simple-auth-oauth2](https://github.com/simplabs/ember-simple-auth/tree/master/packages/ember-simple-auth-oauth2)\n\n  The factory for this authenticator is registered as\n  'simple-auth-authenticator:jwt` in Ember's container.\n\n  @class JWT\n  @namespace SimpleAuth.Authenticators\n  @module simple-auth-token/authenticators/jwt\n  @extends TokenAuthenticator\n*/\nexport default TokenAuthenticator.extend({\n  /**\n    The endpoint on the server for refreshing a token.\n    @property serverTokenRefreshEndpoint\n    @type String\n    @default '/api-token-refresh/'\n  */\n  serverTokenRefreshEndpoint: '/api-token-refresh/',\n\n  /**\n    Sets whether the authenticator automatically refreshes access tokens.\n    @property refreshAccessTokens\n    @type Boolean\n    @default true\n  */\n  refreshAccessTokens: true,\n\n  /**\n    The number of seconds to subtract from the token's time of expiration when\n    scheduling the automatic token refresh call.\n    @property refreshLeeway\n    @type Integer\n    @default 0 (seconds)\n  */\n  refreshLeeway: 0,\n\n  /**\n    The amount of time to wait before refreshing the token - set automatically.\n    @property refreshTokenTimeout\n    @private\n  */\n  refreshTokenTimeout: null,\n\n  /**\n    The name for which decoded token field represents the token expire time.\n    @property tokenExpireName\n    @type String\n    @default 'exp'\n  */\n  tokenExpireName: 'exp',\n\n  /**\n    Default time unit.\n    @property timeFactor\n    @type Integer\n    @default 1 (seconds)\n  */\n  timeFactor: 1,\n\n  /**\n    @method init\n    @private\n  */\n  init: function() {\n    this.serverTokenEndpoint = Configuration.serverTokenEndpoint;\n    this.serverTokenRefreshEndpoint = Configuration.serverTokenRefreshEndpoint;\n    this.identificationField = Configuration.identificationField;\n    this.tokenPropertyName = Configuration.tokenPropertyName;\n    this.refreshAccessTokens = Configuration.refreshAccessTokens;\n    this.refreshLeeway = Configuration.refreshLeeway;\n    this.tokenExpireName = Configuration.tokenExpireName;\n    this.timeFactor = Configuration.timeFactor;\n    this.headers = Configuration.headers;\n  },\n\n  /**\n    Restores the session from a set of session properties.\n\n    It will return a resolving promise if one of two conditions is met:\n\n    1) Both `data.token` and `data.expiresAt` are non-empty and `expiresAt`\n       is greater than the calculated `now`.\n    2) If `data.token` is non-empty and the decoded token has a key for\n       `tokenExpireName`.\n\n    If `refreshAccessTokens` is true, `scheduleAccessTokenRefresh` will\n    be called and an automatic token refresh will be initiated.\n\n    @method restore\n    @param {Object} data The data to restore the session from\n    @return {Ember.RSVP.Promise} A promise that when it resolves results\n                                 in the session being authenticated\n  */\n  restore: function(data) {\n    var _this = this,\n      dataObject = Ember.Object.create(data);\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      var now = (new Date()).getTime();\n      var expiresAt = _this.resolveTime(dataObject.get(_this.tokenExpireName));\n      var token = dataObject.get(_this.tokenPropertyName);\n\n      if (Ember.isEmpty(token)) {\n        return reject(new Error('empty token'));\n      }\n      if (Ember.isEmpty(expiresAt)) {\n        // Fetch the expire time from the token data since `expiresAt`\n        // wasn't included in the data object that was passed in.\n        var tokenData = _this.getTokenData(data[_this.tokenPropertyName]);\n        expiresAt = _this.resolveTime(tokenData[_this.tokenExpireName]);\n        if (Ember.isEmpty(expiresAt)) {\n          return resolve(data);\n        }\n      }\n      if (expiresAt !== expiresAt) {\n        return reject(new Error('invalid expiration'));\n      }\n      if (expiresAt > now) {\n        var wait = expiresAt - now - (_this.refreshLeeway * 1000);\n        if (wait > 0) {\n          if (_this.refreshAccessTokens) {\n            _this.scheduleAccessTokenRefresh(dataObject.get(_this.tokenExpireName), token);\n          }\n          resolve(data);\n        } else if (_this.refreshAccessTokens) {\n            resolve(_this.refreshAccessToken(token).then(function () {\n            return data;\n          }));\n        } else {\n          reject(new Error('unable to refresh token'));\n        }\n      } else {\n        reject(new Error('token is expired'));\n      }\n    });\n  },\n\n  /**\n    Authenticates the session with the specified `credentials`.\n\n    It will return a resolving promise if it successfully posts a request\n    to the `JWT.serverTokenEndpoint` with the valid credentials.\n\n    An automatic token refresh will be scheduled with the new expiration date\n    from the returned refresh token. That expiration will be merged with the\n    response and the promise resolved.\n\n    @method authenticate\n    @param {Object} options The credentials to authenticate the session with\n    @return {Ember.RSVP.Promise} A promise that resolves when an auth token is\n                                 successfully acquired from the server and rejects\n                                 otherwise\n  */\n  authenticate: function(credentials) {\n    var _this = this;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      var data = _this.getAuthenticateData(credentials);\n\n      _this.makeRequest(_this.serverTokenEndpoint, data).then(function(response) {\n        Ember.run(function() {\n          var token = response[_this.tokenPropertyName],\n            tokenData = _this.getTokenData(token),\n            expiresAt = tokenData[_this.tokenExpireName],\n            tokenExpireData = {};\n\n          _this.scheduleAccessTokenRefresh(expiresAt, token);\n\n          tokenExpireData[_this.tokenExpireName] = expiresAt;\n\n          response = Ember.merge(response, tokenExpireData);\n\n          resolve(_this.getResponseData(response));\n        });\n      }, function(xhr) {\n        Ember.run(function() {\n          reject(xhr.responseJSON || xhr.responseText);\n        });\n      });\n    });\n  },\n\n  /**\n    Schedules a token refresh request to be sent to the backend after a calculated\n    `wait` time has passed.\n\n    If both `token` and `expiresAt` are non-empty, and `expiresAt` minus the optional\n    refres leeway is greater than the calculated `now`, the token refresh will be scheduled\n    through Ember.run.later.\n\n    @method scheduleAccessTokenRefresh\n    @private\n  */\n  scheduleAccessTokenRefresh: function(expiresAt, token) {\n    if (this.refreshAccessTokens) {\n      expiresAt = this.resolveTime(expiresAt);\n\n      var now = (new Date()).getTime(),\n        wait = expiresAt - now - (this.refreshLeeway * 1000);\n\n      if (!Ember.isEmpty(token) && !Ember.isEmpty(expiresAt) && wait > 0) {\n        Ember.run.cancel(this._refreshTokenTimeout);\n\n        delete this._refreshTokenTimeout;\n\n        if (!Ember.testing) {\n          this._refreshTokenTimeout = Ember.run.later(this, this.refreshAccessToken, token, wait);\n        }\n      }\n    }\n  },\n\n  /**\n    Makes a refresh token request to grab a new authenticated JWT token from the server.\n\n    It will return a resolving promise if a successful POST is made to the\n    `JWT.serverTokenRefreshEndpoint`.\n\n    After the new token is obtained it will schedule the next automatic token refresh\n    based on the new `expiresAt` time.\n\n    The session will be updated via the trigger `sessionDataUpdated`.\n\n    @method refreshAccessToken\n    @private\n  */\n  refreshAccessToken: function(token) {\n    var _this = this,\n      data = {};\n\n    data[_this.tokenPropertyName] = token;\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      _this.makeRequest(_this.serverTokenRefreshEndpoint, data).then(function(response) {\n        Ember.run(function() {\n          var token = response[_this.tokenPropertyName],\n            tokenData = _this.getTokenData(token),\n            expiresAt = tokenData[_this.tokenExpireName],\n            tokenExpireData = {};\n\n          tokenExpireData[_this.tokenExpireName] = expiresAt;\n\n          data = Ember.merge(response, tokenExpireData);\n\n          _this.scheduleAccessTokenRefresh(expiresAt, token);\n          _this.trigger('sessionDataUpdated', data);\n\n          resolve(response);\n        });\n      }, function(xhr, status, error) {\n        Ember.Logger.warn('Access token could not be refreshed - server responded with ' + error + '.');\n        reject();\n      });\n    });\n  },\n\n  /**\n    Returns the decoded token with accessible returned values.\n\n    @method getTokenData\n    @return {object} An object with properties for the session.\n  */\n  getTokenData: function(token) {\n    var tokenData = atob(token.split('.')[1]);\n\n    try {\n      return JSON.parse(tokenData);\n    } catch (e) {\n      //jshint unused:false\n      return tokenData;\n    }\n  },\n\n  /**\n    Accepts a `url` and `data` to be used in an ajax server request.\n\n    @method makeRequest\n    @private\n  */\n  makeRequest: function(url, data) {\n    return Ember.$.ajax({\n      url: url,\n      method: 'POST',\n      data: JSON.stringify(data),\n      dataType: 'json',\n      contentType: 'application/json',\n      beforeSend: function(xhr, settings) {\n        xhr.setRequestHeader('Accept', settings.accepts.json);\n      },\n      headers: this.headers\n    });\n  },\n\n  /**\n    Cancels any outstanding automatic token refreshes and returns a resolving\n    promise.\n    @method invalidate\n    @param {Object} data The data of the session to be invalidated\n    @return {Ember.RSVP.Promise} A resolving promise\n  */\n  invalidate: function() {\n    Ember.run.cancel(this._refreshTokenTimeout);\n\n    delete this._refreshTokenTimeout;\n\n    return new Ember.RSVP.resolve();\n  },\n\n  /**\n    Handles converting between time units for data between different systems.\n    Default: seconds(1)\n    @method resolveTime\n    @private\n  */\n  resolveTime: function(time) {\n    if (Ember.isEmpty(time)) {\n      return time;\n    }\n    return new Date(time * this.timeFactor).getTime();\n  },\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/addon/authenticators/token.js":"import Ember from 'ember';\nimport Base from 'simple-auth/authenticators/base';\nimport Configuration from '../configuration';\n\n/**\n  Authenticator that works with token-based authentication like JWT.\n\n  _The factory for this authenticator is registered as\n  `'simple-auth-authenticator:token'` in Ember's container._\n\n  @class Token\n  @namespace SimpleAuth.Authenticators\n  @module simple-auth-token/authenticators/token\n  @extends Base\n*/\nexport default Base.extend({\n  /**\n    The endpoint on the server the authenticator acquires the auth token from.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#serverTokenEndpoint`](#SimpleAuth-Configuration-Token-serverTokenEndpoint).\n\n    @property serverTokenEndpoint\n    @type String\n    @default '/api-token-auth/'\n  */\n  serverTokenEndpoint: '/api-token-auth/',\n\n  /**\n    The attribute-name that is used for the identification field when sending the\n    authentication data to the server.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#identificationField`](#SimpleAuth-Configuration-Token-identificationField).\n\n    @property identificationField\n    @type String\n    @default 'username'\n  */\n  identificationField: 'username',\n\n  /**\n    The attribute-name that is used for the password field when sending the\n    authentication data to the server.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#passwordfield`](#SimpleAuth-Configuration-Token-passwordfield).\n\n    @property passwordField\n    @type String\n    @default 'password'\n  */\n  passwordField: 'password',\n\n  /**\n    The name of the property in session that contains token used for authorization.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#tokenPropertyName`](#SimpleAuth-Configuration-Token-tokenPropertyName).\n\n    @property tokenPropertyName\n    @type String\n    @default 'token'\n  */\n  tokenPropertyName: 'token',\n\n  /**\n    The property that stores custom headers that will be sent on every request.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#headers`](#SimpleAuth-Configuration-Token-headers).\n\n    @property headers\n    @type Object\n    @default {}\n  */\n  headers: {},\n\n  /**\n    @method init\n    @private\n  */\n  init: function() {\n    this.serverTokenEndpoint = Configuration.serverTokenEndpoint;\n    this.identificationField = Configuration.identificationField;\n    this.passwordField = Configuration.passwordField;\n    this.tokenPropertyName = Configuration.tokenPropertyName;\n    this.headers = Configuration.headers;\n  },\n\n  /**\n    Restores the session from a set of session properties; __will return a\n    resolving promise when there's a non-empty `token` in the\n    `properties`__ and a rejecting promise otherwise.\n\n    @method restore\n    @param {Object} properties The properties to restore the session from\n    @return {Ember.RSVP.Promise} A promise that when it resolves results in the session being authenticated\n  */\n  restore: function(properties) {\n    var _this = this,\n        propertiesObject = Ember.Object.create(properties);\n\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      if (!Ember.isEmpty(propertiesObject.get(_this.tokenPropertyName))) {\n        resolve(properties);\n      } else {\n        reject();\n      }\n    });\n  },\n\n  /**\n    Authenticates the session with the specified `credentials`; the credentials\n    are `POST`ed to the\n    [`Authenticators.Token#serverTokenEndpoint`](#SimpleAuth-Authenticators-Token-serverTokenEndpoint)\n    and if they are valid the server returns an auth token in\n    response. __If the credentials are valid and authentication succeeds, a\n    promise that resolves with the server's response is returned__, otherwise a\n    promise that rejects with the server error is returned.\n\n    @method authenticate\n    @param {Object} options The credentials to authenticate the session with\n    @return {Ember.RSVP.Promise} A promise that resolves when an auth token is successfully acquired from the server and rejects otherwise\n  */\n  authenticate: function(credentials) {\n    var _this = this;\n    return new Ember.RSVP.Promise(function(resolve, reject) {\n      var data = _this.getAuthenticateData(credentials);\n      _this.makeRequest(data).then(function(response) {\n        Ember.run(function() {\n          resolve(_this.getResponseData(response));\n        });\n      }, function(xhr) {\n        Ember.run(function() {\n          reject(xhr.responseJSON || xhr.responseText);\n        });\n      });\n    });\n  },\n\n  /**\n    Returns an object used to be sent for authentication.\n\n    @method getAuthenticateData\n    @return {object} An object with properties for authentication.\n  */\n  getAuthenticateData: function(credentials) {\n    var authentication = {};\n    authentication[this.passwordField] = credentials.password;\n    authentication[this.identificationField] = credentials.identification;\n    return authentication;\n  },\n\n  /**\n    Returns an object with properties the `authenticate` promise will resolve,\n    be saved in and accessible via the session.\n\n    @method getResponseData\n    @return {object} An object with properties for the session.\n  */\n  getResponseData: function(response) {\n    return response;\n  },\n\n  /**\n    Does nothing\n\n    @method invalidate\n    @return {Ember.RSVP.Promise} A resolving promise\n  */\n  invalidate: function() {\n    return Ember.RSVP.resolve();\n  },\n\n  /**\n    @method makeRequest\n    @private\n  */\n  makeRequest: function(data) {\n    return Ember.$.ajax({\n      url: this.serverTokenEndpoint,\n      method: 'POST',\n      data: JSON.stringify(data),\n      dataType: 'json',\n      contentType: 'application/json',\n      beforeSend: function(xhr, settings) {\n        xhr.setRequestHeader('Accept', settings.accepts.json);\n      },\n      headers: this.headers\n    });\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/addon/authorizers/token.js":"import Ember from 'ember';\nimport Base from 'simple-auth/authorizers/base';\nimport Configuration from '../configuration';\n\n/**\n  Authorizer that works with token-based authentication like JWT\n  by sending the `token` properties from the session in the `Authorization` header.\n\n  _The factory for this authorizer is registered as\n  `'simple-auth-authorizer:token'` in Ember's container._\n\n  @class Token\n  @namespace SimpleAuth.Authorizers\n  @module simple-auth-token/authorizers/token\n  @extends Base\n*/\nexport default Base.extend({\n  /**\n    The prefix used in the value of the Authorization header.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#authorizationPrefix`](#SimpleAuth-Configuration-Token-authorizationPrefix).\n\n    @property authorizationPrefix\n    @type String\n    @default 'Bearer '\n  */\n  authorizationPrefix: 'Bearer ',\n\n  /**\n    The name of the property in session that contains token used for authorization.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#tokenPropertyName`](#SimpleAuth-Configuration-Token-tokenPropertyName).\n\n    @property tokenPropertyName\n    @type String\n    @default 'token'\n  */\n  tokenPropertyName: 'token',\n\n  /**\n    The name of the HTTP Header used to send token.\n\n    This value can be configured via\n    [`SimpleAuth.Configuration.Token#authorizationHeaderName`](#SimpleAuth-Configuration-Token-authorizationHeaderName).\n\n    @property authorizationHeaderName\n    @type String\n    @default 'Authorization'\n  */\n  authorizationHeaderName: 'Authorization',\n\n  /**\n    @method init\n    @private\n  */\n  init: function() {\n    this.tokenPropertyName = Configuration.tokenPropertyName;\n    this.authorizationHeaderName = Configuration.authorizationHeaderName;\n\n    if (Configuration.authorizationPrefix || Configuration.authorizationPrefix === null) {\n      this.authorizationPrefix = Configuration.authorizationPrefix;\n    }\n  },\n\n  /**\n    Authorizes an XHR request by sending the `token`\n    properties from the session in the `Authorization` header:\n\n    ```\n    Authorization: Bearer <token>\n    ```\n\n    @method authorize\n    @param {jqXHR} jqXHR The XHR request to authorize (see http://api.jquery.com/jQuery.ajax/#jqXHR)\n  */\n  authorize: function(jqXHR) {\n    var token = this.buildToken();\n\n    if (this.get('session.isAuthenticated') && !Ember.isEmpty(token)) {\n      if(this.authorizationPrefix) {\n        token = this.authorizationPrefix + token;\n      }\n\n      jqXHR.setRequestHeader(this.authorizationHeaderName, token);\n    }\n  },\n\n  /**\n    Builds the token string. It can be overriden for inclusion of quotes.\n\n    @method buildToken\n    @return {String}\n  */\n  buildToken: function() {\n    return this.get('session.secure.' + this.tokenPropertyName);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/addon/utils/load-config.js":"import Ember from 'ember';\n\nexport default function(defaults, callback) {\n  return function(container, config) {\n    var wrappedConfig = Ember.Object.create(config);\n    for (var property in this) {\n      if (this.hasOwnProperty(property) && Ember.typeOf(this[property]) !== 'function') {\n        this[property] = wrappedConfig.getWithDefault(property, defaults[property]);\n      }\n    }\n    if (callback) {\n      callback.apply(this, [container, config]);\n    }\n  };\n}\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/app/initializers/simple-auth.js":"import Configuration from 'simple-auth/configuration';\nimport setup from 'simple-auth/setup';\nimport ENV from '../config/environment';\n\nexport default {\n  name: 'simple-auth',\n  initialize: function(container, application) {\n    Configuration.load(container, ENV['simple-auth'] || {});\n    setup(container, application);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-ember-cli-simple-auth-token/node_modules/ember-cli-simple-auth-token/app/initializers/simple-auth-token.js":"import TokenAuthenticator from 'simple-auth-token/authenticators/token';\nimport JWTAuthenticator from 'simple-auth-token/authenticators/jwt';\nimport Authorizer from 'simple-auth-token/authorizers/token';\nimport Configuration from 'simple-auth-token/configuration';\nimport ENV from '../config/environment';\n\n/**\n  Ember Simple Auth Token's Initializer.\n  By default load both the Token and JWT (with refresh) Authenticators.\n*/\nexport default {\n  name: 'simple-auth-token',\n  before: 'simple-auth',\n  initialize: function(container) {\n    Configuration.load(container, ENV['simple-auth-token'] || {});\n    container.register('simple-auth-authorizer:token', Authorizer);\n    container.register('simple-auth-authenticator:token', TokenAuthenticator);\n    container.register('simple-auth-authenticator:jwt', JWTAuthenticator);\n  }\n};\n"}